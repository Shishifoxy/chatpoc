{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/chat.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"sent\": a0,\n    \"received\": a1\n  };\n};\nfunction ChatComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 6)(1, \"div\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, ctx_r0.isSender(msg_r1), !ctx_r0.isSender(msg_r1)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(msg_r1.message);\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(chatService, route) {\n      this.chatService = chatService;\n      this.route = route;\n      this.messageInput = '';\n      this.messageList = [];\n      this.roomId = '';\n      this.sender = '';\n    }\n    ngOnInit() {\n      this.route.paramMap.subscribe(params => {\n        const role = params.get('userId') || 'client';\n        this.roomId = `room-${role}`;\n        this.sender = role;\n        this.chatService.connect(this.roomId);\n        this.chatService.getMessages().subscribe(messages => {\n          this.messageList = messages;\n        });\n      });\n    }\n    sendMessage() {\n      if (this.messageInput.trim()) {\n        this.chatService.sendMessage(this.messageInput, this.sender, this.roomId);\n        this.messageInput = '';\n      }\n    }\n    isSender(msg) {\n      return msg.sender === this.sender;\n    }\n  }\n  ChatComponent.ɵfac = function ChatComponent_Factory(t) {\n    return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  ChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatComponent,\n    selectors: [[\"app-chat\"]],\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"chat-window\"], [1, \"messages\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-area\"], [\"placeholder\", \"\\u00C9cris ton message...\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"ngClass\"], [1, \"message-bubble\"]],\n    template: function ChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"ul\", 1);\n        i0.ɵɵtemplate(2, ChatComponent_li_2_Template, 3, 5, \"li\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_4_listener($event) {\n          return ctx.messageInput = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_5_listener() {\n          return ctx.sendMessage();\n        });\n        i0.ɵɵtext(6, \"Envoyer\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.messageList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.messageInput);\n      }\n    },\n    dependencies: [i3.NgClass, i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel]\n  });\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}